#!/bin/sh

. sigma-common

NWIF_FILE="$SIGMA_CONFIG_DIR/nwif"
SYS_NWIF_DIR="/sys/class/net"

# Data shared with status bar
NWIF="none"
PLUGGED="false"
WIRELESS="false"
ESSID=""
FREQ=""
STRENGTH="0"
UP="false"
IPV4="none"
IPV6="none"

# Retrieve network interface name from cached file
if [ -f "$NWIF_FILE" ]; then
	nwif="$(cat "$NWIF_FILE")"
	if [ ! -z "$nwif" ]; then
		NWIF="$nwif"
	fi
else
	nwif="$(ls "$SYS_NWIF_DIR" | head -n 1)"
	if [ ! -z "$nwif" ]; then
		NWIF="$nwif"
		echo "$NWIF" > "$NWIF_FILE"
	fi
fi

# Check if interface is plugged or not
if [ ! -d "$SYS_NWIF_DIR/$NWIF" ]; then
	PLUGGED="false"
else
	PLUGGED="true"

	# Check if interface is wireless
	if [ -d "$SYS_NWIF_DIR/$NWIF/wireless" ]; then
		WIRELESS="true"
		ESSID="$(iwgetid -r "$NWIF")"
		FREQ="$(iwgetid -r -f "$NWIF" | xargs printf "%.3s")"

		quality="$(iwconfig wlan0 | grep Quality | sed 's/.*Quality=//g' | sed -E 's/\s.*//g')"
		if [ ! -z "$quality" ]; then
			STRENGTH="$(perl -e "print int($quality * 100)")"
		fi
	fi

	# Check if interface is up
	state="$(cat "$SYS_NWIF_DIR/$NWIF/operstate")"
	if [ "$state" = "up" ]; then
		UP="true"
	fi

	# Get IP addresses
	ipv4="$(ip address show "$NWIF" | grep "inet " | head -n 1 | sed -E "s/\s+inet\s+//g" | cut -d " " -f 1)"
	ipv6="$(ip address show "$NWIF" | grep "inet6 " | head -n 1 | sed -E "s/\s+inet6\s+//g" | cut -d " " -f 1)"

	if [ ! -z "$ipv4" ]; then
		IPV4="$ipv4"
	fi

	if [ ! -z "$ipv6" ]; then
		IPV6="$ipv6"
	fi
fi

if [ "$1" = "waybar" ]; then
	text=""
	alt=""
	tooltip=""
	class=""
	percentage=""

	if [ "$PLUGGED" = "false" ]; then
		text="󰚦"
		if [ -z "$NWIF" ]; then
			text="$text none"
			tooltip="none: unplugged"
		else
			text="$text $nwif"
			tooltip="<span color='#00ffc8'><b>$nwif</b></span>: unplugged"
		fi
	else
		if [ "$WIRELESS" = "false" ]; then
			if [ "$IPV4" != "none" ] || [ "$IPV6" != "none" ] && [ "$UP" = "true" ]; then
				text=""
			else
				text=""
			fi

			text="$text <span rise='-1pt'>$NWIF</span>"
		else
			if  [ "$IPV4" = "none" ] && [ "$IPV6" = "none" ] || [ "$UP" == "false" ]; then
				text="睊 <span rise='-1pt'>$NWIF</span>"
			else
				text="<span face='Material Symbols Outlined' font_size='large'>"
				if [ $STRENGTH -le 10 ]; then
					text="${text}"
				elif [ $STRENGTH -lt 30 ]; then
					text="${text}"
				elif [ $STRENGTH -lt 50 ]; then
					text="${text}"
				elif [ $STRENGTH -lt 80 ]; then
					text="${text}"
				elif [ $STRENGTH -le 100 ]; then
					text="${text}"
				fi
				# PangoFormat can't align text...
				text="${text}</span><span font_size='4pt'> </span><span rise='2pt'>$NWIF</span>"
			fi
		fi
	fi

	# NOTE: Waybar disallows using '\n' on the JSON output
	printf "{"
	printf '    "text": "%s",' "$text"
	printf '    "alt": "%s",' "$alt"
	printf '    "tooltip": "%s",' "$tooltip"
	printf '    "class": "%s",' "$class"
	printf '    "percentage": "%s"' "$percentage"
	printf "}"
else
	printf "%s\n" "nwif|string|$NWIF"
	printf "%s\n" "plugged|bool|$PLUGGED"
	printf "%s\n" "wireless|bool|$WIRELESS"
	printf "%s\n" "essid|string|$ESSID"
	printf "%s\n" "freq|string|$FREQ"
	printf "%s\n" "strength|string|$STRENGTH"
	printf "%s\n" "up|bool|$UP"
	printf "%s\n" "ipv4|string|$IPV4"
	printf "%s\n" "ipv6|string|$IPV6"
	printf "\n"
fi
