#!/bin/sh

. sigma-common

NWIF_FILE="$SIGMA_CONFIG_DIR/nwif"
SYS_NWIF_DIR="/sys/class/net"

# Data shared with status bar
NWIF="none"
PLUGGED="false"
WIRELESS="false"
ESSID=""
FREQ=""
STRENGTH="0"
UP="false"
STATE="unplugged"
IPV4="none"
IPV6="none"

# Check if user is attempting to change the network
if [ "$1" = "choose" ]; then
	new_nwif="$(ls /sys/class/net | sigma-dmenu -p "Select network interface...")"
	if [ ! -z "$new_nwif" ]; then
		printf "%s" "$new_nwif" > "$SIGMA_CONFIG_DIR/nwif"
		exit 0
	fi
	exit 1
fi

# Retrieve network interface name from cached file
if [ -f "$NWIF_FILE" ]; then
	nwif="$(cat "$NWIF_FILE")"
	if [ ! -z "$nwif" ]; then
		NWIF="$nwif"
	fi
else
	nwif="$(ls "$SYS_NWIF_DIR" | head -n 1)"
	if [ ! -z "$nwif" ]; then
		NWIF="$nwif"
		echo "$NWIF" > "$NWIF_FILE"
	fi
fi

# Check if interface is plugged or not
if [ ! -d "$SYS_NWIF_DIR/$NWIF" ]; then
	PLUGGED="false"
else
	PLUGGED="true"

	# Check if interface is wireless
	if [ -d "$SYS_NWIF_DIR/$NWIF/wireless" ]; then
		WIRELESS="true"
		ESSID="$(iwgetid -r "$NWIF")"
		FREQ="$(iwgetid -r -f "$NWIF" | xargs printf "%.3s")"

		quality="$(iwconfig "$NWIF" | grep Quality | sed 's/.*Quality=//g' | sed -E 's/\s.*//g')"
		if [ ! -z "$quality" ]; then
			STRENGTH="$(perl -e "print int($quality * 100)")"
		fi
	fi

	# Check if interface is up
	# (the `cat` will fail if it's not)
	carrier="$(cat "$SYS_NWIF_DIR/$NWIF/carrier" 2>/dev/null)"
	if [ $? ] && [ "$carrier" = "1" ]; then
		STATE="up"
	else
		STATE="down"
	fi

	if [ "$STATE" = "up" ]; then
		UP="true"
	fi

	# Get IP addresses
	ipv4="$(ip address show "$NWIF" | grep "inet " | head -n 1 | sed -E "s/\s+inet\s+//g" | cut -d " " -f 1)"
	ipv6="$(ip address show "$NWIF" | grep "inet6 " | head -n 1 | sed -E "s/\s+inet6\s+//g" | cut -d " " -f 1)"

	if [ ! -z "$ipv4" ]; then
		IPV4="$ipv4"
	fi

	if [ ! -z "$ipv6" ]; then
		IPV6="$ipv6"
	fi
fi

if [ "$1" = "manage" ]; then
	action_connect="Connect to a network"
	action_dhcp="Get a new IPv4 lease (DHCP)"
	action_dhcp6="Get a new IPv6 lease (DHCP)"
	actions="$(printf "$action_connect\n$action_dhcp\n$action_dhcp6")"
	action="$(printf "$actions" | sigma-dmenu -p "Select an action...")"

	if [ "$action" = "$action_connect" ]; then
		notify-send "Starting 'iwctl'..."
		foot -a "wmfloat" -e "iwctl"
	elif [ "$action" = "$action_dhcp" ]; then
		if udhcpc -q -i "$NWIF"; then
			notify-send " Successfully acquired new IPv4 lease"
		else
			notify-send " Failed to get new IPv4 lease"
		fi
	elif [ "$action" = "$action_dhcp6" ]; then
		if udhcpc6 -q -i "$NWIF"; then
			notify-send " Successfully acquired new IPv6 lease"
		else
			notify-send " Failed to get new IPv6 lease"
		fi
	else
		exit 1
	fi

	exit 0
elif [ "$1" = "waybar" ]; then
	text=""
	alt=""
	tooltip="<span color='#00ffc8'>iface</span>: $NWIF\\n<span color='#00ffc8'>state</span>: $STATE"
	class=""
	percentage=""

	if [ "$PLUGGED" = "false" ]; then
		text="󰚦 $NWIF"
	else
		if [ "$WIRELESS" = "false" ]; then
			if [ "$IPV4" != "none" ] || [ "$IPV6" != "none" ] && [ "$UP" = "true" ]; then
				text=""
			else
				text=""
			fi

			text="$text <span rise='-1pt'>$NWIF</span>"
			tooltip="${tooltip}\\n<span color='#00ffc8'>ipv4</span>:  $IPV4"
			tooltip="${tooltip}\\n<span color='#00ffc8'>ipv6</span>:  $IPV6"
		else
			if  [ "$IPV4" = "none" ] && [ "$IPV6" = "none" ] || [ "$UP" == "false" ]; then
				text="睊 <span rise='-1pt'>$NWIF</span>"
			else
				text="<span face='Material Symbols Outlined' font_size='large' font_weight='normal' rise='1pt'>"
				if [ $STRENGTH -le 5 ]; then
					text="${text}"
				elif [ $STRENGTH -le 25 ]; then
					text="${text}"
				elif [ $STRENGTH -le 50 ]; then
					text="${text}"
				elif [ $STRENGTH -le 75 ]; then
					text="${text}"
				elif [ $STRENGTH -le 100 ]; then
					text="${text}"
				fi
				# PangoFormat can't align text...
				text="${text}</span><span font_size='4pt'> </span><span rise='3pt'>$NWIF</span>"
			fi

			if [ ! -z "$ESSID" ]; then
				tooltip="${tooltip}\\n<span color='#00ffc8'>essid</span>: $ESSID (${STRENGTH}%)"
			fi
			tooltip="${tooltip}\\n<span color='#00ffc8'>ipv4</span>:  $IPV4"
			tooltip="${tooltip}\\n<span color='#00ffc8'>ipv6</span>:  $IPV6"
		fi
	fi

	# NOTE: Waybar disallows using '\n' on the JSON output
	printf "{"
	printf '    "text": "%s",' "$text"
	printf '    "alt": "%s",' "$alt"
	printf '    "tooltip": "%s",' "$tooltip"
	printf '    "class": "%s",' "$class"
	printf '    "percentage": "%s"' "$percentage"
	printf "}"
else
	printf "%s\n" "nwif|string|$NWIF"
	printf "%s\n" "plugged|bool|$PLUGGED"
	printf "%s\n" "wireless|bool|$WIRELESS"
	printf "%s\n" "essid|string|$ESSID"
	printf "%s\n" "freq|string|$FREQ"
	printf "%s\n" "strength|string|$STRENGTH"
	printf "%s\n" "up|bool|$UP"
	printf "%s\n" "state|string|$STATE"
	printf "%s\n" "ipv4|string|$IPV4"
	printf "%s\n" "ipv6|string|$IPV6"
	printf "\n"
fi
